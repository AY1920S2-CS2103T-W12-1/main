@startuml
skinparam backgroundColor #ffffff
skinparam classAttributeIconSize 0
hide circle

class DistrictInfo {
    /' Fields '/
    + {static} CENTRAL : String
    + {static} EAST : String
    + {static} NORTH_EAST : String
    + {static} WEST : String
    + {static} NORTH : String
    - {static} centralArea : List<String>
    - {static} eastArea : List<String>
    - {static} northEastArea : List<String>
    - {static} westArea : List<String>
    - {static} northArea : List<String>

    /' Methods '/
    + {static} isValidArea(searchTerm : String) : boolean
    + {static} sameAreaRegex(searchTerm : String) : List<String>
}

class Model<<interface>> {
    + updateFilteredOrderList(predicate : Predicate<Order>) : void
    + updateFilteredReturnOrderList(predicate : Predicate<ReturnOrder>) : void
}
Model ..up> Predicate

class NearbyCommandUtil {
    /' Fields '/
    - {static} postalSectorInfo : HashMap<Integer, String>
    /' Methods '/
    + {static} isValidPostalSector(postalSector : Index) : boolean
    + {static} getGeneralLocation(postalSector : Index) : Optional<String>
    + {static} sameGeneralLocation(location : String) : List<String>
    - {static} initialize() : void
}

class Index {
    /' Fields '/
    - zeroBasedIndex : int
    /' Methods '/
    + getZeroBased() : int
    + getOneBased() : int
    + {static} fromZeroBased(zeroBasedIndex : int) : Index
    + {static} fromOneBased(oneBasedIndex : int) : Index
}

class NearbyCommand {
    /' Fields '/
    - searchTerm : String
    - isOrderListSearch : boolean
    - isReturnListSearch : boolean
    /' Methods '/
    + execute(model : Model) : CommandResult
    - getPostalSectorPredicate() : Predicate<Order>
    - getPostalSectorReturnPredicate() : Predicate<ReturnOrder>
    - getAreaPredicate() : Predicate<Order>
    - getAreaReturnPredicate() : Predicate<ReturnOrder>
    - showPostalSectors(model : Model) : CommandResult
    - showArea(model : Model) : void
    - isPostalSectorSearch() : boolean
    - hasRegexInSearchTerm(regex : String, searchTerm : String) : boolean
}

abstract class "{abstract}\nCommand" {
    + {abstract} execute(model : Model) : CommandResult
}

interface Predicate<T> <<interface>> {
    + test(t : T) : boolean
}

NearbyCommand --up|> "{abstract}\nCommand"
NearbyCommand ..right> NearbyCommandUtil
NearbyCommand ..up|> Model
NearbyCommand ..left> DistrictInfo

class NearbyCommandParser implements Parser {
    + parse(args : String) : NearbyCommand
}

NearbyCommandParser ..> NearbyCommand

interface Parser<T> <<interface>> {
    parse(userInput : String) : T
}

DistrictInfo -up-> Index
/' Alignment, using hidden connector '/
DistrictInfo -[hidden] NearbyCommandUtil

@enduml
