@startuml
!include style.puml

box Logic LOGIC_COLOR_T1
participant ":LogicManager" as LogicManager LOGIC_COLOR
participant "d:DeliveredCommand" as DeliveredCommand LOGIC_COLOR
participant ":CommandResult" as CommandResult LOGIC_COLOR
end box

box Model MODEL_COLOR_T1
participant ":Model" as Model MODEL_COLOR
participant ":Order" as Order LOGIC_COLOR
end box
activate LogicManager

group sd Execution of DeliveredCommand

LogicManager -> DeliveredCommand : execute(model)
activate DeliveredCommand

DeliveredCommand -> DeliveredCommand: isFlagForOrderList()
activate DeliveredCommand
DeliveredCommand --> DeliveredCommand: true
alt order was not delivered
deactivate DeliveredCommand

DeliveredCommand -> Model : processDeliveryOfOrder(model)
Model -> Model : getFilteredOrderList()
activate Model
create Order
Model -> Order : get(1)
activate Order
Order --> Model
deactivate Order

Model -> Model : isDelivered()
activate Model
Model --> Model : false
deactivate Model
Model --> DeliveredCommand : false
DeliveredCommand -> Model : deliverAndUpdateOrderList(model)
Model -> Model : getFilteredOrderList()
Model -> Order : get(1)
activate Order
Order --> Model : orderToBeDelivered
deactivate Order
Model --> DeliveredCommand : orderToBeDelivered
deactivate Model

DeliveredCommand -> Order : createDeliveredOrder(orderToBeDelivered, deliveredParcelDescriptor)
activate Order
Order --> DeliveredCommand : editedOrder
deactivate Order
DeliveredCommand -> Model
activate Model
Model -> Model : setOrder(orderToBeDelivered, editedOrder)
Model -> Model : deliverOrder(editedOrder)
Model -> Model : updateFilteredOrderList(PREDICATE_SHOW_ALL_ORDERS)
Model --> DeliveredCommand
deactivate Model

DeliveredCommand -> CommandResult ++
CommandResult --> DeliveredCommand --

DeliveredCommand --> LogicManager -- : result
deactivate LogicManager
end
end

@enduml