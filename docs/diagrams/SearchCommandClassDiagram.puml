@startuml
skinparam backgroundColor #ffffff
skinparam classAttributeIconSize 0
hide circle

OrderContainsKeywordsPredicate -down-> ArgumentMultimap
ReturnOrderContainsKeywordsPredicate -down-> ArgumentMultimap
"{abstract}\nCommand" <|-- SearchCommand
ReturnOrderContainsKeywordsPredicate <-down- SearchCommand
ReturnOrderContainsKeywordsPredicate -[dashed]-|> Predicate
OrderContainsKeywordsPredicate <-down- SearchCommand
OrderContainsKeywordsPredicate -[dashed]-|> Predicate

abstract class "{abstract}\nCommand" {
    {abstract} execute(Model model) : CommandResult
}

class SearchCommand {
    'Fields of SearchCommand
    + COMMON_WORD : String
    + MESSAGE_USAGE : String
    + MULTIPLE_FLAGS_DETECTED : String
    - orderPredicate : OrderContainsKeywordsPredicate
    - returnPredicate : ReturnOrderContainsKeywordsPredicate
    - NEWLINE : String

    'Methods of SearchCommand
    + execute(model : Model) : CommandResult
    + equals(other : Object) : boolean
}

class OrderContainsKeywordsPredicate<Order> {
    'Fields of OrderContainsKeywordsPredicate
    - keywords : List<String>
    - argumentMultimap : ArgumentMultimap
    - isGeneralSearch : boolean

    'Methods of OrderContainsKeywordsPredicate
    + test(order : Order) : boolean
    + equals(other : Object) : boolean

}

class ReturnOrderContainsKeywordsPredicate<Order> {
    'Fields of ReturnOrderContainsKeywordsPredicate
    - keywords : List<String>
    - argumentMultimap : ArgumentMultimap
    - isGeneralSearch : boolean

    'Methods of ReturnOrderContainsKeywordsPredicate
    + test(order : Order) : boolean
    + equals(other : Object) : boolean

}

interface Predicate<T> <<interface>> {
    'Interface Methods
    + test(t : T) : boolean
}

class ArgumentMultimap {
    'Fields of ArgumentMultimap
    - argMultimap : Map<Prefix, List<String>>

}

@enduml
